"use strict";(self.webpackChunktech_talks_in=self.webpackChunktech_talks_in||[]).push([[5103],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(p,".").concat(d)]||u[d]||c[d]||s;return n?r.createElement(g,o(o({ref:t},m),{},{components:n})):r.createElement(g,o({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const s={slug:"load-testing",title:"Load & Performance Testing",authors:["pavan"],description:"perofrmance testing your application services",tags:["performance","api","development"]},o=void 0,i={permalink:"/blog/load-testing",source:"@site/blog/2023-03-03-load-testing.md",title:"Load & Performance Testing",description:"perofrmance testing your application services",date:"2023-03-03T00:00:00.000Z",formattedDate:"March 3, 2023",tags:[{label:"performance",permalink:"/blog/tags/performance"},{label:"api",permalink:"/blog/tags/api"},{label:"development",permalink:"/blog/tags/development"}],readingTime:3.86,hasTruncateMarker:!0,authors:[{name:"Pavan Kumar",title:"tech-talks Core Team",url:"https://github.com/mrpavan",imageURL:"https://github.com/mrpavan.png",key:"pavan"}],frontMatter:{slug:"load-testing",title:"Load & Performance Testing",authors:["pavan"],description:"perofrmance testing your application services",tags:["performance","api","development"]},nextItem:{title:"Playground - Live Coding",permalink:"/blog/live-coding-demo"}},p={authorsImageUrls:[void 0]},l=[],m={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Performance & Load Testing your web services is crucial with APIs becoming more prevalent in usage and required through testing for handling adhoc and busrt loads thoughout the product lifecycle. ",(0,a.kt)("a",{parentName:"p",href:"https://k6.io"},"K6.io")," is one such tool from well known opensource team graphna labs that enables basic to advance testing sceraios for the developers to test their API's and identify any potential blockages across the service by writing tests in their well known scripting language 'javascript'. This blog article guides you to quickly setup and run the load test in literaly in 5 minutes. YES in 5, can't beleive jump write in"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Features :")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"available as opensource and also SaaS "),(0,a.kt)("li",{parentName:"ul"},"Script tests in Javascript"),(0,a.kt)("li",{parentName:"ul"},"Supports 3rd party integrations and extensions"),(0,a.kt)("li",{parentName:"ul"},"quick to setup and use")),(0,a.kt)("p",null,"Lets Begin...  "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Install k6")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"for mac os with homebrew package manager "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"brew install k6\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"for linux or debian follow these steps"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69\necho "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list\nsudo apt-get update\nsudo apt-get install k6\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"refer k6 documentation for additional options ",(0,a.kt)("a",{parentName:"p",href:"https://k6.io/docs/get-started/installation/"},"k6")))),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Get started with test scripts\nTo perform testing on your web application & apis; create new script file for example ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"script.js"))," and use below sample code  ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"   import http from 'k6/http';\n   import { sleep } from 'k6';\n\n   export default function () {\n   http.get('https://test.k6.io');\n   sleep(1);\n   }\n\n")),(0,a.kt)("p",null," ",(0,a.kt)("strong",{parentName:"p"},"If you are feeling to do more use below script")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import {check} from 'k6';\nimport http from 'k6/http';\n\nconst URL = 'https://dummyjson.com/products/1'\n// const SEARCH_URL = 'https://dummyjson.com/products/search?q=phone'\n\n\nvar params = {\n   Headers: {\n       'Content-Type': 'application/json',\n       // 'Authorization':'Bearer your key or bearer tokens for the api endpoint'\n   },\n};\n\n// Simple Get request for 5 concuerrent in 3 s\n\nexport let options = {\n   vus: 5,\n   duration: '30s'\n}\n\n\nexport default function () {\n   let res = http.get(URL, params);\n   // console.log(res)\n   check(res, {\n       'is status 200': (r) => r.status ===200\n   });\n}\n\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Run the tests - use the command ",(0,a.kt)("inlineCode",{parentName:"p"}," k6 run script.js")," where script.js is the file name in step 2 above. script file can be named anything, as a best practice name it base don on waht script is expected to do")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"By default it uses 1 virtual user, for running multiple users or simultaneous users use ",(0,a.kt)("inlineCode",{parentName:"p"}," k6 run --vus 5 --duration 30s script.js")," this refers to 5 virtual users for the duration of 30 seconds. Add or change numbers based on what you are trying to acheive. Also can be added to the script under options object. Additional options are available, refer to ",(0,a.kt)("a",{parentName:"p",href:"https://k6.io/docs/get-started/running-k6/"},"K6 documentation"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Results are displayed upon compeletion with required metrices for users broadly classifed into 2"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"As summary statistics, in an end-of-test summary report."),(0,a.kt)("li",{parentName:"ul"},"In granular details, with measurements for every data point across test (and timestamps)"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Sample Result for 5 VUS and 30s Duration from k6/script_get.js in github repository mentioned below"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"k6 run script_get.js \n\n        /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n    /\\  /  \\     |  |/  /   /  /    \n    /  \\/    \\    |     (   /   \u203e\u203e\\  \n/          \\   |  |\\  \\ |  (\u203e)  | \n/ __________ \\  |__| \\__\\ \\_____/ .io\n\nexecution: local\n    script: script_get.js\n    output: -\n\nscenarios: (100.00%) 1 scenario, 5 max VUs, 1m0s max duration (incl. graceful stop):\n        * default: 5 looping VUs for 30s (gracefulStop: 30s)\n")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \u2713 is status 200\n\n    checks.........................: 100.00% \u2713 2732      \u2717 0   \n    data_received..................: 1.8 MB  59 kB/s\n    data_sent......................: 101 kB  3.4 kB/s\n    http_req_blocked...............: avg=435.17\xb5s min=0s      med=1\xb5s     max=243.67ms p(90)=1\xb5s     p(95)=2\xb5s     \n    http_req_connecting............: avg=49.01\xb5s  min=0s      med=0s      max=28.26ms  p(90)=0s      p(95)=0s      \n    http_req_duration..............: avg=54.23ms  min=31.52ms med=50.78ms max=720.83ms p(90)=64.94ms p(95)=73.46ms \n    { expected_response:true }...: avg=54.23ms  min=31.52ms med=50.78ms max=720.83ms p(90)=64.94ms p(95)=73.46ms \n    http_req_failed................: 0.00%   \u2713 0         \u2717 2732\n    http_req_receiving.............: avg=918.92\xb5s min=25\xb5s    med=103\xb5s   max=77.08ms  p(90)=1.98ms  p(95)=3ms     \n    http_req_sending...............: avg=126.7\xb5s  min=21\xb5s    med=96\xb5s    max=13.78ms  p(90)=205\xb5s   p(95)=279.89\xb5s\n    http_req_tls_handshaking.......: avg=170.46\xb5s min=0s      med=0s      max=100.87ms p(90)=0s      p(95)=0s      \n    http_req_waiting...............: avg=53.19ms  min=31.31ms med=49.86ms max=720.59ms p(90)=64.07ms p(95)=71.94ms \n    http_reqs......................: 2732    90.903468/s\n    iteration_duration.............: avg=54.89ms  min=31.67ms med=50.99ms max=721.07ms p(90)=65.28ms p(95)=74.14ms \n    iterations.....................: 2732    90.903468/s\n    vus............................: 5       min=5       max=5 \n    vus_max........................: 5       min=5       max=5 \n\n\nrunning (0m30.1s), 0/5 VUs, 2732 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 5 VUs  30s\n```\n")),(0,a.kt)("p",null,"As you can see with 10 to 20 lines of code we were able to run 2700++ requests with 5 virtual users with max duration of 30s. Go ahead and try it out yourself."),(0,a.kt)("p",null,"There are some samples for http methods like get, put, post and one may refer to code in k6 folder of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mrpavan/performance-testing"},"github repository"),". I have used ",(0,a.kt)("a",{parentName:"p",href:"https://dummyjson.com/"},"dummyjson.com")," for api requests and response assertions and request url's may be updated to suit your needs before executing the scripts. Feel free to modify and use it as needed."))}u.isMDXComponent=!0}}]);