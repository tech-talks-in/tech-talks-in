"use strict";(self.webpackChunktech_talks_in=self.webpackChunktech_talks_in||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"live-coding-demo","metadata":{"permalink":"/blog/live-coding-demo","source":"@site/blog/2022-12-29-live-coding.md","title":"Playground - Live Coding","description":"playground - live coding in docusaurus","date":"2022-12-29T00:00:00.000Z","formattedDate":"December 29, 2022","tags":[{"label":"api","permalink":"/blog/tags/api"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"Pavan Kumar","title":"tech-talks Core Team","url":"https://github.com/mrpavan","imageURL":"https://github.com/mrpavan.png","key":"pavan"}],"frontMatter":{"slug":"live-coding-demo","title":"Playground - Live Coding","authors":["pavan"],"description":"playground - live coding in docusaurus","tags":["api","development"]},"nextItem":{"title":"Public API\'s Listing","permalink":"/blog/public-api-listing"}},"content":"Wanted to create something fun with jsx, Live coding. Go ahead try setting initial value of the counter and update function to your liking or write your own code. Give it a try! visit **Live Coding Demo** under tutorials on how to implement in your website\\n\\n``` jsx live\\nfunction LiveCode(props) {\\n    const [count, setCount] = useState(0);\\n\\n    return (\\n        <div>\\n        <h1> {count} </h1>\\n        <button onClick={() => setCount(count + 1)}>Add</button>\\n        <span> </span>\\n        <button onClick={() => setCount(count - 1)}>Sub</button>\\n        </div>\\n    )\\n}\\n\\n```"},{"id":"public-api-listing","metadata":{"permalink":"/blog/public-api-listing","source":"@site/blog/2022-12-12-public-api-listing.md","title":"Public API\'s Listing","description":"Collection of Open API\'s to work during development of any of your app ideas, includes free, paid and freemium based services that can be integrated with any application checkout thier websites for getting your own apikey, pricing information and documentations.","date":"2022-12-12T00:00:00.000Z","formattedDate":"December 12, 2022","tags":[{"label":"api","permalink":"/blog/tags/api"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":1.4,"hasTruncateMarker":false,"authors":[{"name":"Pavan Kumar","title":"tech-talks Core Team","url":"https://github.com/mrpavan","imageURL":"https://github.com/mrpavan.png","key":"pavan"}],"frontMatter":{"slug":"public-api-listing","title":"Public API\'s Listing","authors":["pavan"],"tags":["api","development"]},"prevItem":{"title":"Playground - Live Coding","permalink":"/blog/live-coding-demo"},"nextItem":{"title":"GitHub Multiple Accounts","permalink":"/blog/github-multiple-accounts"}},"content":"Collection of Open API\'s to work during development of any of your app ideas, includes free, paid and freemium based services that can be integrated with any application **checkout thier websites for getting your own apikey, pricing information and documentations**.\\n\\n### API Key Required\\n\\n- [Auth0](https://auth0.com/) : Easy to implement, adaptable authentication and authorization platform by okta, free plan with up to 7,000 active users and unlimited logins\\n\\n- [GetOTP](https://otp.dev/en/docs/) : GetOTP is a web service that helps you build a complete multichannel One Time Password (OTP) with almost no code. With a simple API call, you can implement your verification flow. No need to worry about retries or multiple channel logic. Free plan includes 100 requests for email OTP only over a month\\n\\n- [AbstractAPI Holidays](https://www.abstractapi.com/api/holidays-api#pricing): Retrieve religious, non-public and public holidays for 200+ countries worldwide and for any specific year. They also provide ip lookup and others too. visit their [website](https://www.abstractapi.com)\\n\\n- [Public apis](https://github.com/public-apis/public-apis) : A collective list of over 1.4k free APIs for use in software and web development on github\\n\\n### NO API Key or authentication required\\n\\n- [my-ip](https://www.myip.com/api-docs/) : gives you ip address info with location, simple to use ``` curl https://api.myip.com ```\\n\\n- [Random User Generator](https://randomuser.me/api/) : gives test user data with name, email, profile pic , address and many user related attrobutes\\n\\n- [Exchange rates](https://open.er-api.com/v6/latest/USD) : exchange rates conversion based on base currency suplied in currency codes```curl https://open.er-api.com/v6/latest/USD```\\n\\n- [Daily Astronomy picture](https://go-apod.herokuapp.com/apod) : high quality space pics \\n\\n- [JSON Placeholder](https://jsonplaceholder.typicode.com/posts/1) : REST API for test data\\n\\n- [Public API](https://api.publicapis.org/entries) : api for [public apis](https://github.com/public-apis/public-apis) project on github, supports other methods like /random and /categories\\n\\n- [Random Jokes](https://v2.jokeapi.dev/joke/Any?safe-mode) : jokes for a little laugh"},{"id":"github-multiple-accounts","metadata":{"permalink":"/blog/github-multiple-accounts","source":"@site/blog/2022-11-11-github-multiple-accounts.md","title":"GitHub Multiple Accounts","description":"To use two GitHub accounts on a Mac over ssh, you will need to set up separate ssh keys for each account.","date":"2022-11-11T00:00:00.000Z","formattedDate":"November 11, 2022","tags":[{"label":"github","permalink":"/blog/tags/github"},{"label":"ssh","permalink":"/blog/tags/ssh"}],"readingTime":2.04,"hasTruncateMarker":true,"authors":[{"name":"Pavan Kumar","title":"tech-talks Core Team","url":"https://github.com/mrpavan","imageURL":"https://github.com/mrpavan.png","key":"pavan"}],"frontMatter":{"slug":"github-multiple-accounts","title":"GitHub Multiple Accounts","authors":["pavan"],"tags":["github","ssh"]},"prevItem":{"title":"Public API\'s Listing","permalink":"/blog/public-api-listing"},"nextItem":{"title":"Maximizing Your Sprints: The Ultimate Guide to Efficient Planning","permalink":"/blog/sprint-planning"}},"content":"To use two GitHub accounts on a Mac over ssh, you will need to set up separate ssh keys for each account.\\n\\nFollow the steps below:\\n\\n- Generate a new ssh key for your second GitHub account. You can do this by running the ssh-keygen command in the terminal and following the prompts. Make sure to specify a different file name for the key than the one you used for your first account.\\n\\n- Add the public key for your second account to your GitHub account. You can do this by going to the \\"SSH and GPG keys\\" section of your GitHub profile settings and clicking the \\"New SSH key\\" button. Then, paste the contents of the public key file (located in the ~/.ssh directory on your Mac) into the \\"Key\\" field and give it a descriptive name.\\n\\n- Add the private key for your second account to your ssh agent. You can do this by running the following command in the terminal:\\n\\n  ```bash title=\\"username@hostname:~$\\"\\n  ssh-add ~/.ssh/<private key file name>\\n  ```\\n\\n- Modify your ssh config file to specify which ssh key to use for each GitHub account. To do this, open the ~/.ssh/config file in a text editor and add the following lines:\\n \x3c!--truncate--\x3e\\n\\n  ```bash title=\\"username@hostname:~$nano ~/.ssh/config\\"\\n  Host github.com-<account1username>\\n    HostName github.com\\n    User git\\n    IdentityFile ~/.ssh/<private key file name for account 1>\\n\\n  Host github.com-<account2username>\\n    HostName github.com\\n    User git\\n    IdentityFile ~/.ssh/<private key file name for account 2>\\n  ```\\n\\nReplace `<account1username>` and `<account2username>` with the respective usernames for each account, and `<private key file name for account 1>` and `<private key file name for account 2>` with the respective private key file names for each account.\\n\\n:::tip check access by running below on terminal \\n```bash \\nssh -T git@github.com-account1username\\n``` \\n\\nHi account1username! You\'ve successfully authenticated, but GitHub does not provide shell access.\\n\\n:::\\n\\nRepeat for *account2username*. \\n\\n**Congratulations!** you have successfuly authenticated and verified access to both the accounts and you may clone and do other operations by running git commands. Use the **modified ssh URLs** for your repositories to push and pull code from your separate accounts. For example, to push to a repository owned by your second account, you would use a URL like ```git@github.com-<account2username>:<username>/<repository>.git```.\\n\\nFor any reason, if you ever wanted to check available identities in your ssh agent or delete them use below commands in your terminal\\n\\n:::caution Run with extreme caution\\n\\nTo list all identities ```ssh-add -l``` or `ssh-add -L`\\n\\nTo remove all identities ```ssh-add -D```\\n\\n:::"},{"id":"sprint-planning","metadata":{"permalink":"/blog/sprint-planning","source":"@site/blog/2022-06-06-sprint-planning.md","title":"Maximizing Your Sprints: The Ultimate Guide to Efficient Planning","description":"Are you ready to take your software development to the next level? Look no further than sprint planning! In this article, we\'ll dive into the world of Agile methodology and explore the importance of sprint activities in delivering value to customers in a timely manner. From sprint planning and daily scrum meetings, to sprint review and retrospective, we\'ve got you covered. So buckle up and let\'s get started on our sprint journey!","date":"2022-06-06T00:00:00.000Z","formattedDate":"June 6, 2022","tags":[{"label":"sprint","permalink":"/blog/tags/sprint"},{"label":"agile","permalink":"/blog/tags/agile"},{"label":"scrum","permalink":"/blog/tags/scrum"},{"label":"development team","permalink":"/blog/tags/development-team"},{"label":"Strategic Sprint Planning","permalink":"/blog/tags/strategic-sprint-planning"},{"label":"Step-by-Step Guide","permalink":"/blog/tags/step-by-step-guide"}],"readingTime":6.185,"hasTruncateMarker":false,"authors":[{"name":"Pavan Kumar","title":"tech-talks Core Team","url":"https://github.com/mrpavan","image_url":"https://github.com/mrpavan.png","imageURL":"https://github.com/mrpavan.png"}],"frontMatter":{"slug":"sprint-planning","title":"Maximizing Your Sprints: The Ultimate Guide to Efficient Planning","authors":{"name":"Pavan Kumar","title":"tech-talks Core Team","url":"https://github.com/mrpavan","image_url":"https://github.com/mrpavan.png","imageURL":"https://github.com/mrpavan.png"},"tags":["sprint","agile","scrum","development team","Strategic Sprint Planning","Step-by-Step Guide"]},"prevItem":{"title":"GitHub Multiple Accounts","permalink":"/blog/github-multiple-accounts"},"nextItem":{"title":"JWT","permalink":"/blog/json-web-tokens"}},"content":"Are you ready to take your software development to the next level? Look no further than sprint planning! In this article, we\'ll dive into the world of Agile methodology and explore the importance of sprint activities in delivering value to customers in a timely manner. From sprint planning and daily scrum meetings, to sprint review and retrospective, we\'ve got you covered. So buckle up and let\'s get started on our sprint journey! \\n\\n**What is a Sprint?** \\nA sprint is a time-boxed period in Agile software development, typically lasting between one and four weeks(though 2 weeks is quite common across software development teams), during which a defined set of work is completed. The goal of a sprint is to deliver a potentially releasable product increment.\\n\\nEffective sprint planning, execution, and review are essential for project success. By breaking down work into smaller, manageable chunks, sprints allow teams to quickly adapt to changing requirements and deliver value to customers in a timely manner.\\n\\n**Importance of Sprint in Agile Methodology**\\nSprints are a key component of Agile methodology, which emphasizes flexibility, collaboration, and rapid feedback. By breaking down work into smaller, manageable chunks, sprints allow teams to quickly adapt to changing requirements and deliver value to customers in a timely manner.\\n\\n**Purpose of Sprint Activities**\\nThe purpose of sprint activities is to plan, execute, and review the work that will be completed during the sprint in order to deliver a potentially releasable product increment. These activities include sprint planning, daily scrum meetings, sprint review, and sprint retrospective.\\n\\n**Key Roles and Responsibilities**\\n- **The Scrum Master** is responsible for facilitating the meeting, ensuring that it stays on track, and addressing any issues that arise. \\n- **The Product Owner** is responsible for presenting the backlog and prioritizing tasks. \\n- **The development team** is responsible for estimating the time and effort required to complete the tasks and identifying any dependencies or risks.\\n\\n### Sprint Planning\\n\\nSprint planning is a collaborative effort between the development team, Scrum Master, and Product Owner. Before the sprint planning meeting, the team should set clear goals for the sprint and create a backlog of tasks to be completed.\\n\\n- Setting Goals: The team should identify the goals for the sprint, including what features or functionality they want to deliver, and what improvements they want to make to the product.\\n\\n- Creating a Backlog: The Product Owner is responsible for creating and prioritizing a backlog of tasks that need to be completed during the sprint. The backlog should be reviewed and refined before the sprint planning meeting.\\n\\n- The Sprint Planning Meeting: During the sprint planning meeting, the development team, Scrum Master, and Product Owner will review the goals and backlog, and plan how to achieve them during the sprint.\\n\\nEstimating and Prioritizing Tasks: During the sprint planning meeting, the development team will estimate the time and effort required to complete each task in the backlog. The team will then prioritize the tasks based on the goals for the sprint and the priorities set by the Product Owner.\\n\\n### Sprint Execution\\n-  Daily Scrum Meetings: Daily scrum meetings are short, 15-minute meetings that are held every day during the sprint. The purpose of these meetings is to give the development team an opportunity to plan their work for the day, and to identify any issues that need to be addressed.\\n\\n- The daily scrum meeting follows a simple structure, with each team member answering three questions: What did I do yesterday? What will I do today? Are there any blockers or issues?\\n\\n- Benefits for Team and Project: Daily scrum meetings help to ensure that the development team is on track to meet the sprint goals, and they provide an opportunity for the team to quickly address any issues or blockers that may arise.\\n\\n- Sprint Review: The sprint review is a meeting held at the end of each sprint to review the work that has been completed and to get feedback from stakeholders. The agenda for the sprint review should include a demonstration of the new features or functionality, a review of the sprint goals, and a discussion of any issues or risks that need to be addressed. The sprint review is an opportunity for stakeholders, such as the Product Owner, customers, and other members of the organization, to provide feedback and input on the work that has been completed. This feedback can be used to adjust the backlog and priorities for the next sprint.\\n\\n- Sprint Retrospective: The sprint retrospective is a meeting held at the end of each sprint to review the sprint process and identify areas for improvement. The outcomes of the sprint retrospective should include actionable items that can be implemented in the next sprint to improve the overall process. During the sprint retrospective, the development team, Scrum Master, and Product Owner should review the sprint process, including the sprint planning, daily scrum meetings, sprint review, and any other activities that were conducted. They should identify any challenges that arose and look for ways to improve the process in the next sprint.\\n\\n### Typical daily tasks in a 2 weeks sprint plan\\n\\nThe daily tasks for a 10-day sprint will depend on the specific goals and tasks that have been defined during the sprint planning meeting. However, here is a general outline of daily tasks that may be completed during a 10-day sprint:\\n\\n**Day 1:**\\n\\n1. Review sprint goals and backlog\\n2. Identify and prioritize tasks for the day\\n3. Begin work on high-priority tasks\\n\\n**Day 2-9:**\\n\\n1. Attend daily scrum meeting to review progress and plan for the day\\n2. Continue work on high-priority tasks\\n3. Address any issues or blockers that arise\\n4. Participate in team collaboration and knowledge-sharing\\n5. Continuously update task status on the tracking tool\\n\\n**Day 10** (Last Day of the Sprint)\\n\\n1. Wrap up any remaining tasks\\n2. Prepare for the sprint review and retrospective meetings\\n3. Review and update the backlog for the next sprint\\n4. Submit completed work for review\\n\\nIt is also important to note that the daily scrum meeting is an important part of the sprint process, and should be held every day, regardless of the day in the sprint. This daily meeting helps the team to stay on track, identify any issues or blockers, and ensure that the sprint goals are being met.\\n\\n\\n### Recap of key takeaways\\nSprints are a key component of Agile methodology, which allows teams to deliver value to customers in a timely manner. Sprint activities include sprint planning, daily scrum meetings, sprint review, and sprint retrospective. These activities help teams to plan, execute, and review the work that will be completed during the sprint in order to deliver a potentially releasable product increment.\\n\\nSprint activities can be implemented in any type of project, not just software development. By following the steps outlined in this article, one can start to implement sprints in their own projects and experience the benefits of Agile methodology.\\n\\n### Additional Resources \\nTo learn more about Agile methodology and sprints, refer to resources such as the Scrum Guide, \\"Agile Estimating and Planning\\" by Mike Cohn, and \\"Scrum: The Art of Doing Twice the Work in Half the Time\\" by Jeff Sutherland.\\n\\nThere are many tools available to assist with sprint planning and execution, such as [Jira](https://www.atlassian.com/), [Trello](https://trello.com/), [Asana](https://asana.com/), and [monday.com](https://www.momday.com). These tools can help teams to manage their backlog, track progress, and collaborate more effectively."},{"id":"json-web-tokens","metadata":{"permalink":"/blog/json-web-tokens","source":"@site/blog/2022-05-27-json-web-tokens.md","title":"JWT","description":"You might have heard about JWT if you are in field of developing applications or not from other domains. JSON Web Token (JWT) is a standard for representing claims securely between two parties. It is typically used to securely transmit information between a server and a client, such as an API and a single-page application. JWTs are a useful tool for securely transmitting information between parties, and are commonly used in modern web applications for authentication and authorization","date":"2022-05-27T00:00:00.000Z","formattedDate":"May 27, 2022","tags":[{"label":"jwt","permalink":"/blog/tags/jwt"},{"label":"jsonwebtokens","permalink":"/blog/tags/jsonwebtokens"},{"label":"node","permalink":"/blog/tags/node"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"}],"readingTime":4.6,"hasTruncateMarker":true,"authors":[{"name":"Pavan Kumar","title":"tech-talks Core Team","url":"https://github.com/mrpavan","image_url":"https://github.com/mrpavan.png","imageURL":"https://github.com/mrpavan.png"}],"frontMatter":{"slug":"json-web-tokens","title":"JWT","authors":{"name":"Pavan Kumar","title":"tech-talks Core Team","url":"https://github.com/mrpavan","image_url":"https://github.com/mrpavan.png","imageURL":"https://github.com/mrpavan.png"},"tags":["jwt","jsonwebtokens","node","authentication","authorization"]},"prevItem":{"title":"Maximizing Your Sprints: The Ultimate Guide to Efficient Planning","permalink":"/blog/sprint-planning"},"nextItem":{"title":"MDX Sample","permalink":"/blog/mdx-sample-post"}},"content":"You might have heard about JWT if you are in field of developing applications or not from other domains. **JSON Web Token** (JWT) is a standard for representing claims securely between two parties. It is typically used to securely transmit information between a server and a client, such as an API and a single-page application. JWTs are a useful tool for securely transmitting information between parties, and are commonly used in modern web applications for authentication and authorization\\n\\nA JWT consists of three parts: a header, a payload, and a signature. The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA. The payload contains the claims. Claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public, and private claims. Registered claims are a set of predefined claims that are not mandatory but recommended, to provide a set of useful, interoperable claims. Some of the registered claims are: iss (issuer), exp (expiration time), sub (subject), aud (audience), and others. Public claims are claims that are defined in the IANA JSON Web Token Registry or defined in other specifications, but are not registered. Private claims are claims that are used to share information between parties that agree on using them and are neither registered or public claims...\x3c!--truncate--\x3e\\n\\nThe signature is used to verify that the sender of the JWT is who it says it is and to ensure that the message wasn\'t changed along the way. The signature is created by taking the encoded header, the encoded payload, a secret, and the algorithm specified in the header, and signing that. For example, if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:\\n\\nHMACSHA256(\\nbase64UrlEncode(header) + \\".\\" +\\nbase64UrlEncode(payload),\\nsecret)\\n\\nTo verify the signature, the recipient of the JWT needs to compute the signature and compare it to the one provided in the JWT. If they match, the JWT is considered to be valid.\\n\\nJWTs are commonly used to authenticate users. When a user logs in to a system, the server generates a JWT that contains the user\'s information, such as the user\'s name, email, and other details, and signs it with a secret. The JWT is then sent back to the client, where it is stored in a cookie or local storage. When the client makes a request to the server, it includes the JWT in the request header. The server verifies the signature and, if it is valid, grants the client access to the requested resource.\\n\\nJWTs have a number of benefits over traditional authentication methods, such as cookies and sessions. They are stateless, meaning that the server does not need to store any information about the client in order to verify the JWT. This makes them scalable and easy to implement. They are also secure, as they are signed and can\'t be modified without the signature being invalidated.\\n\\n**Example**\\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\\n\\nThis JWT has three parts, separated by dots (.). The first part is the header, which consists of the type of the token (JWT) and the signing algorithm being used (HS256). The second part is the payload, which contains the claims. In this case, the claims are the subject (sub), which is the user\'s ID, and the name (name) of the user. The third part is the signature, which is used to verify that the sender of the JWT is who it says it is and to ensure that the message wasn\'t changed along the way.\\n\\nHere is the same JWT, with the parts decoded:\\n\\nHeader:\\n{\\n\\"alg\\": \\"HS256\\",\\n\\"typ\\": \\"JWT\\"\\n}\\n\\nPayload:\\n{\\n\\"sub\\": \\"1234567890\\",\\n\\"name\\": \\"John Doe\\",\\n\\"iat\\": 1516239022\\n}\\n\\nTo create this JWT, you would first need to create the header and payload as JSON objects, and then encode them using base64Url encoding. Then, you would create the signature by signing the encoded header and payload with a secret using the HMAC SHA256 algorithm.\\n\\nTo verify the signature of this JWT, you would need to decode the header and payload and then recompute the signature using the same algorithm and secret. If the signature you compute matches the one provided in the JWT, the JWT is considered to be valid.\\n\\n**nodejs sample**\\n\\nTo use JWTs in a Node.js application, you can use the jsonwebtoken library. This library provides functions for creating and verifying JWTs.\\n\\nHere is an example of how you can use the jsonwebtoken library to create a JWT:\\n\\n```js\\nconst jwt = require(\'jsonwebtoken\');\\n\\nconst payload = {\\n  sub: \'1234567890\',\\n  name: \'John Doe\'\\n};\\n\\nconst secret = \'my-secret\';\\n\\nconst token = jwt.sign(payload, secret);\\n\\n```\\n\\nThe sign() function takes the payload and the secret as arguments, and returns the JWT. The payload can be any JSON object, and the secret is a string that is used to sign the JWT.\\n\\nHere is an example of how you can use the jsonwebtoken library to verify a JWT:\\n\\n```js\\nconst jwt = require(\'jsonwebtoken\');\\n\\nconst token = \'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\';\\nconst secret = \'my-secret\';\\n\\ntry {\\n  const payload = jwt.verify(token, secret);\\n  console.log(payload);\\n} catch (error) {\\n  console.error(error);\\n}\\n\\n```\\n\\nThe verify() function takes the JWT and the secret as arguments, and returns the payload if the signature is valid. If the signature is invalid, it throws an error.\\n\\nYou can also pass additional options to the sign() and verify() functions, such as the expiration time of the JWT or the audience for which the JWT is intended."},{"id":"mdx-sample-post","metadata":{"permalink":"/blog/mdx-sample-post","source":"@site/blog/2021-04-01-mdx-sample-post.mdx","title":"MDX Sample","description":"Simple mdx sample code Docusaurus Markdown features, such as MDX.","date":"2021-04-01T00:00:00.000Z","formattedDate":"April 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.18,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-sample-post","title":"MDX Sample","authors":["slorber"],"tags":["docusaurus"]},"prevItem":{"title":"JWT","permalink":"/blog/json-web-tokens"}},"content":"Simple mdx sample code [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"}]}')}}]);